sync:
  interval_ms: 50   #made longer for testing
  overflow: 10
heartbeat:
  rate: 1
  msg: "77f#05"

nodes:

  RoboTeq_HBL2360A:
    eds_pkg: little_pig_ctrl
    eds_file: "/config/HBL2360A.eds"
    id: 8

    motors:
      drive_motor:
        joint: ackermann_rear_axle
        # (vel (m/s) * 60 s/min * 3.28084 ft/m * 20 gear ratio) / (pi * 23.5 in / 12 in/ft)
        vel_to_device: "(vel * 60 * 3.28084 * 20 /(pi * 23.5 / 12))"
        vel_from_device: "obj6044 * (pi * 23.5 / 12) / (60 * 3.28084 * 20)"
        #pos_from_device:  "(obj6044 * 2 * pi) / (24 * 22)"
        motor_layer:
          id: 1
          offset: 0x0
          switching_state: 5 #operation enable

      steering_motor:
        joint: ackermann_steering_joint
        # This is for Count Position Fedback
        # ((pos (rad) * 307699 max count value) / .628319 max turn in rads) + 149000 homing for straight
        pos_to_device: "((pos * 307699)/ .628319) + 149000"
        pos_from_device:  "(obj6864 - 149000) * .628319 / 307699"
        # This is for Position Relative Feedback, This is ideal however the motor would not start correctly from CAN
        # pos_to_device: "pos / (2 * pi / 12) * 1000"
        # pos_from_device:  "obj6864 * (2 * pi / 12) / 1000"
        motor_layer:
          id: 2
          offset: 0x800
          switching_state: 5 #operation enable
          
    publish: #Uncomment this section to publish this data to ros topics
      #- "0x6864!" #	Position Actual Value CH 2
      #- "0x606C!" # Velocity Actual Value CH 1
      #- "0x210Fsub2!" #	Temp 1
      #- "0x210Fsub3!" #	Temp 2
      #- "0x6041!" #		Status Word 1
      #- "0x6841!" #		Status Word 2
      #- "0x210Asub1!" #	Motor 1 Speed
      #- "0x2122sub1!" #	Motor 1 Status Flag
      #- "0x2100sub1!" #	Motor 1 Amps
      #- "0x2104sub2!" #	Motor 2 Encoder Count
      #- "0x2122sub2!" #	Motor 2 Status Flag
      #- "0x2100sub2!" #	Motor 2 Amps
      - "0x2112!" #		Fault Flag
